diff --git a/node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js b/node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js
index efb12af..09b5978 100644
--- a/node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js
+++ b/node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js
@@ -64,9 +64,9 @@ function configureNext(

   // In Fabric, LayoutAnimations are unconditionally enabled for Android, and
   // conditionally enabled on iOS (pending fully shipping; this is a temporary state).
-  const FabricUIManager: FabricUIManagerSpec = global?.nativeFabricUIManager;
-  if (FabricUIManager?.configureNextLayoutAnimation) {
-    global?.nativeFabricUIManager?.configureNextLayoutAnimation(
+  const FabricUIManager: FabricUIManagerSpec = global && global.nativeFabricUIManager;
+  if (FabricUIManager && FabricUIManager.configureNextLayoutAnimation) {
+    global.nativeFabricUIManager.configureNextLayoutAnimation(
       config,
       onAnimationComplete,
       onAnimationDidFail ??
@@ -78,7 +78,7 @@ function configureNext(
   // This will only run if Fabric is *not* installed.
   // If you have Fabric + non-Fabric running in the same VM, non-Fabric LayoutAnimations
   // will not work.
-  if (UIManager?.configureNextLayoutAnimation) {
+  if (UIManager && UIManager.configureNextLayoutAnimation) {
     UIManager.configureNextLayoutAnimation(
       config,
       onAnimationComplete ?? function() {},
diff --git a/node_modules/react-native/React/Base/RCTTouchHandler.m b/node_modules/react-native/React/Base/RCTTouchHandler.m
index b4dab8e..2195f8e 100644
--- a/node_modules/react-native/React/Base/RCTTouchHandler.m
+++ b/node_modules/react-native/React/Base/RCTTouchHandler.m
@@ -14,6 +14,7 @@
 #import "RCTBridge.h"
 #import "RCTEventDispatcherProtocol.h"
 #import "RCTLog.h"
+#import "RCTRootContentView.h"
 #import "RCTSurfaceView.h"
 #import "RCTTouchEvent.h"
 #import "RCTUIManager.h"
@@ -112,6 +113,16 @@ - (void)_recordNewTouches:(NSSet<UITouch *> *)touches
       continue;
     }

+    UIView *touchRootView = touch.view;
+    while (touchRootView && ![touchRootView isKindOfClass:RCTRootContentView.class]) {
+      touchRootView = touchRootView.superview;
+    }
+
+    if ([touchRootView isKindOfClass:RCTRootContentView.class] && touchRootView != self.view) {
+      // handled by a different UITouchHandler
+      continue;
+    }
+
     // Get new, unique touch identifier for the react touch
     const NSUInteger RCTMaxTouches = 11; // This is the maximum supported by iDevices
     NSInteger touchID = ([_reactTouches.lastObject[@"identifier"] integerValue] + 1) % RCTMaxTouches;
